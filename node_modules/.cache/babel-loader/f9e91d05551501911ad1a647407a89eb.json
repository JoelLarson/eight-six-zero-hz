{"ast":null,"code":"var _jsxFileName = \"/Users/nebulae/anglebotics/attendance/webApp/EightSixZeroHz/src/Html5QrcodePlugin.jsx\";\nimport { Html5QrcodeScanner, Html5QrcodeSupportedFormats } from \"html5-qrcode\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst qrcodeRegionId = \"html5qr-code-full-region\";\nclass Html5QrcodePlugin extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: qrcodeRegionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 16\n    }, this);\n  }\n  componentWillUnmount() {\n    // TODO(mebjas): See if there is a better way to handle\n    //  promise in `componentWillUnmount`.\n    this.html5QrcodeScanner.clear().catch(error => {\n      console.error(\"Failed to clear html5QrcodeScanner. \", error);\n    });\n  }\n  componentDidMount() {\n    // Creates the configuration object for Html5QrcodeScanner.\n    function createConfig(props) {\n      var config = {};\n      if (props.fps) {\n        config.fps = props.fps;\n      }\n      if (props.qrbox) {\n        config.qrbox = props.qrbox;\n      }\n      if (props.aspectRatio) {\n        config.aspectRatio = props.aspectRatio;\n      }\n      if (props.disableFlip !== undefined) {\n        config.disableFlip = props.disableFlip;\n      }\n      if (props.zoom) {\n        config.zoom = props.zoom;\n      }\n      config.formatsToSupport = [Html5QrcodeSupportedFormats.QR_CODE];\n      return config;\n    }\n\n    //var config = createConfig(this.props);\n    var config = createConfig(this.props);\n    var verbose = this.props.verbose === true;\n\n    // Suceess callback is required.\n    if (!this.props.qrCodeSuccessCallback) {\n      throw \"qrCodeSuccessCallback is required callback.\";\n    }\n    this.html5QrcodeScanner = new Html5QrcodeScanner(qrcodeRegionId, config, verbose);\n    this.html5QrcodeScanner.render(this.props.qrCodeSuccessCallback, this.props.qrCodeErrorCallback);\n  }\n}\n;\nexport default Html5QrcodePlugin;","map":{"version":3,"names":["Html5QrcodeScanner","Html5QrcodeSupportedFormats","React","qrcodeRegionId","Html5QrcodePlugin","Component","render","componentWillUnmount","html5QrcodeScanner","clear","catch","error","console","componentDidMount","createConfig","props","config","fps","qrbox","aspectRatio","disableFlip","undefined","zoom","formatsToSupport","QR_CODE","verbose","qrCodeSuccessCallback","qrCodeErrorCallback"],"sources":["/Users/nebulae/anglebotics/attendance/webApp/EightSixZeroHz/src/Html5QrcodePlugin.jsx"],"sourcesContent":["import { Html5QrcodeScanner, Html5QrcodeSupportedFormats } from \"html5-qrcode\";\nimport React from 'react';\n\nconst qrcodeRegionId = \"html5qr-code-full-region\";\n\nclass Html5QrcodePlugin extends React.Component {\n    render() {\n        return <div id={qrcodeRegionId} />;\n    }\n\n    componentWillUnmount() {\n        // TODO(mebjas): See if there is a better way to handle\n        //  promise in `componentWillUnmount`.\n        this.html5QrcodeScanner.clear().catch(error => {\n            console.error(\"Failed to clear html5QrcodeScanner. \", error);\n        });\n    }\n\n    componentDidMount() {\n        // Creates the configuration object for Html5QrcodeScanner.\n        function createConfig(props) {\n            var config = {};\n            if (props.fps) {\n            config.fps = props.fps;\n            }\n            if (props.qrbox) {\n            config.qrbox = props.qrbox;\n            }\n            if (props.aspectRatio) {\n            config.aspectRatio = props.aspectRatio;\n            }\n            if (props.disableFlip !== undefined) {\n            config.disableFlip = props.disableFlip;\n            }\n            if (props.zoom) {\n                config.zoom = props.zoom;\n            }\n            config.formatsToSupport = [Html5QrcodeSupportedFormats.QR_CODE];\n            return config\n            \n        }\n\n        //var config = createConfig(this.props);\n        var config = createConfig(this.props);\n        var verbose = this.props.verbose === true;\n\n        // Suceess callback is required.\n        if (!(this.props.qrCodeSuccessCallback )) {\n            throw \"qrCodeSuccessCallback is required callback.\";\n        }\n\n        this.html5QrcodeScanner = new Html5QrcodeScanner(\n            qrcodeRegionId, config, verbose);\n        this.html5QrcodeScanner.render(\n            this.props.qrCodeSuccessCallback,\n            this.props.qrCodeErrorCallback);\n    }\n};\n\nexport default Html5QrcodePlugin;\n"],"mappings":";AAAA,SAASA,kBAAkB,EAAEC,2BAA2B,QAAQ,cAAc;AAC9E,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,cAAc,GAAG,0BAA0B;AAEjD,MAAMC,iBAAiB,SAASF,KAAK,CAACG,SAAS,CAAC;EAC5CC,MAAM,GAAG;IACL,oBAAO;MAAK,EAAE,EAAEH;IAAe;MAAA;MAAA;MAAA;IAAA,QAAG;EACtC;EAEAI,oBAAoB,GAAG;IACnB;IACA;IACA,IAAI,CAACC,kBAAkB,CAACC,KAAK,EAAE,CAACC,KAAK,CAACC,KAAK,IAAI;MAC3CC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAChE,CAAC,CAAC;EACN;EAEAE,iBAAiB,GAAG;IAChB;IACA,SAASC,YAAY,CAACC,KAAK,EAAE;MACzB,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAID,KAAK,CAACE,GAAG,EAAE;QACfD,MAAM,CAACC,GAAG,GAAGF,KAAK,CAACE,GAAG;MACtB;MACA,IAAIF,KAAK,CAACG,KAAK,EAAE;QACjBF,MAAM,CAACE,KAAK,GAAGH,KAAK,CAACG,KAAK;MAC1B;MACA,IAAIH,KAAK,CAACI,WAAW,EAAE;QACvBH,MAAM,CAACG,WAAW,GAAGJ,KAAK,CAACI,WAAW;MACtC;MACA,IAAIJ,KAAK,CAACK,WAAW,KAAKC,SAAS,EAAE;QACrCL,MAAM,CAACI,WAAW,GAAGL,KAAK,CAACK,WAAW;MACtC;MACA,IAAIL,KAAK,CAACO,IAAI,EAAE;QACZN,MAAM,CAACM,IAAI,GAAGP,KAAK,CAACO,IAAI;MAC5B;MACAN,MAAM,CAACO,gBAAgB,GAAG,CAACtB,2BAA2B,CAACuB,OAAO,CAAC;MAC/D,OAAOR,MAAM;IAEjB;;IAEA;IACA,IAAIA,MAAM,GAAGF,YAAY,CAAC,IAAI,CAACC,KAAK,CAAC;IACrC,IAAIU,OAAO,GAAG,IAAI,CAACV,KAAK,CAACU,OAAO,KAAK,IAAI;;IAEzC;IACA,IAAI,CAAE,IAAI,CAACV,KAAK,CAACW,qBAAuB,EAAE;MACtC,MAAM,6CAA6C;IACvD;IAEA,IAAI,CAAClB,kBAAkB,GAAG,IAAIR,kBAAkB,CAC5CG,cAAc,EAAEa,MAAM,EAAES,OAAO,CAAC;IACpC,IAAI,CAACjB,kBAAkB,CAACF,MAAM,CAC1B,IAAI,CAACS,KAAK,CAACW,qBAAqB,EAChC,IAAI,CAACX,KAAK,CAACY,mBAAmB,CAAC;EACvC;AACJ;AAAC;AAED,eAAevB,iBAAiB"},"metadata":{},"sourceType":"module"}